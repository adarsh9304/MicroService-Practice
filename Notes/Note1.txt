Decoupling and Inter-Service Communication:

Your approach of using RabbitMQ is good for achieving loose coupling and async communication. However, keep in mind that RabbitMQ is ideal for asynchronous tasks but might not always be suitable for all inter-service communications, especially when real-time synchronous responses are needed.
You could mention that RabbitMQ (or similar) is good for tasks that don't require immediate responses (like sending emails or processing orders), but for real-time responses (like validating payments), HTTP/REST or gRPC might be a better choice. This would provide a more well-rounded answer.

Managing Inter-Service Communication:

You mentioned both HTTP and RabbitMQ, which is a good starting point. However, you should discuss the pros and cons of each a bit more. For example:
HTTP/REST: Synchronous, easy to implement, but tightly coupled.
Message Broker (RabbitMQ): Asynchronous, better for scalability and decoupling, but adds complexity in terms of eventual consistency and message handling.
Consider adding gRPC for synchronous communication, which is more efficient than HTTP in many cases.
Databases:

Your answer about selecting different databases based on the service is on point, but you could improve it by providing specific examples:
Product catalog: NoSQL (MongoDB) for flexible schema and rapid changes in product data.
Order management: SQL (PostgreSQL or MySQL) for transactional integrity and strong consistency.
Payment: SQL for ensuring ACID transactions.
Shipping: NoSQL or SQL, depending on the complexity of data.
This adds more depth and specificity to your reasoning.
Consistency Across Services:

Your mention of event-driven architecture and event sourcing is good, but you could clarify that eventual consistency is often used in microservices because achieving strong consistency across distributed systems can be challenging.
You could also add that implementing sagas or distributed transactions could help ensure business process consistency across services.
Additional Points:
You could also mention API Gateway for managing inter-service communication and service discovery mechanisms (like Consul, Eureka) for locating services.